%import common.WS
%ignore WS

%import common.ESCAPED_STRING -> STR
%import common.SIGNED_NUMBER -> NUM
CHAR : /'([^'\\]|\\.)'/

%import common.CNAME -> VAR

many{x} : x*

args{x} : ((x ",")* x ","?)? -> many

!modifiers : "pub"? "static"? -> many

_decl : "var" VAR ":" typesig ["=" expr]
      | "var" VAR [":" typesig] "=" expr
      | "var" VAR ":" typesig "=" expr

lit : STR -> l_str
    | CHAR -> l_char
    | NUM -> l_num

?typesig : ts_arr | ts_call

    ts_arr : "[" typesig "]"

    ?ts_call : VAR "(" args{typesig} ")" | ts_atom

    ts_atom : "(" typesig ")"
           | VAR -> ts_var

?expr : e_assign

    ?!e_assign : e_cast (("="|"+="|"-="|"*="|"/="|"%=") e_assign)?

    ?!e_cast : op_cmp ("as" typesig)?

    ?!op_cmp : op_ord (("=="|"!=") op_cmp)?

    ?!op_ord : op_term (("<"|">"|"<="|">=") op_ord)?

    ?!op_term : op_factor (("+"|"-") op_term)?

    ?!op_factor : e_call (("*"|"/"|"%") op_factor)?

    ?e_call : e_dot ("(" args{expr} ")")?

    ?e_dot : (e_call | e_atom) ("." VAR)?

    ?e_atom : "(" expr ")"
            | lit -> e_lit
            | VAR -> e_var

?stmt : (simple ";") | compound

    ?simple : s_decl | s_break | s_continue | s_return | s_expr

        s_decl : _decl

        s_break : "break"

        s_continue : "continue"

        s_return : "return" [expr]

        s_expr : expr

    ?compound : s_block | s_if | s_while
    
        s_block : "{" many{stmt} "}"

        s_if : "if" "(" expr ")" stmt ["else" stmt]

        s_while : "while" "(" expr ")" [":" "(" expr ")"] stmt
 
?decl : d_decl | d_class | d_func

    d_decl : _decl ";"

    d_class : modifiers "class" VAR "{" many{decl} "}"

    d_func : modifiers "fn" VAR "(" args{arg} ")" typesig s_block

        arg : VAR ":" typesig -> many

file : many{d_class}
